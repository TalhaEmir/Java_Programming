

OOP Polymorphism

Exception Handling

__________________________________________________________________

Polymorphism
Reference casting
Exceptions
try catch
finally
__________________________________________________________________

Polymorphism

	objects are able to take different forms through their references

  public Maria extends Person implements

  Student,Sibling,Friend,Mom{}


  Maria is Maria --> not polimorfism

  Maria maria = new Maria();

  Maria is Student
  Student maria = new Maria();

  Maria is Sibling
  Sibling maria = new Maria();

  Maria is Friend
  Friend maria = new Maria();

  Maria is Mom
  Maria is Customer
  Maria is Employee


What are the possible references of an object

		public interface Driveable{}
		public class Street implements Driveable{}

	itself: the reference is the same type as the object
		Street obj = new Street();

	any super class: any direct or indirect super class can be a reference
		Object obj = new Street();

	any implemented interface
		Driveable obj = new Street();
			- this is a Street object, but with a reference of the Driveable interface

	is a relation helps us understand which references an object can have

AudioBook extends Book implements Listenable {

}
Without:
1) AudioBook ab = new AudioBook(); Ref and Obj type are same
polymorphism:
2) Book ab       = new AudioBook(); Ref is Parent class
3) Listenable ab = new AudioBook(); Ref is Parent interface
4) Object ab     = new AudioBook(); Ref is Parent class

Examples:
	ArrayList<Integer> nums = new ArrayList<>();
	List<Integer> nums = new ArrayList<>();

	WebDriver driver = new ChromeDriver();
=================================

Color
Red extends Color
Blue extends Color
Black extends Color
Yellow extends Color

Red red = new Red();

-> Declare Variable so that I can assign any color object.

Color color;
color = new Red();
color = new Blue();
color = new Black();
color = new Yellow();

public void paint(Color color) {
	color.paint();
}

Color col1 = new Red();
paint(col1);

Color col2 = new Yellow();
paint(col2);

Color[] cols = new Color[2];
cols[0] = new Black();
cols[1] = new Yellow();

------------------

WebDriver driver = new ChromeDriver();
WebDriver driver = new SafariDriver();
WebDriver driver = new FireFoxDriver();
=================================
access & execution
	The reference needs to have access to the field
	but the execution happens on the object

Benefit of polymorphism

	To limit what you have access to, so you interact with the most important components

	the other references(especially the interface reference), allow us to be more flexible when using objects

	polymorphic data structures: store different object types together if they share an inheritance relationship

	with methods: the parameter and returns can be super references or interface references which allow the methods to be more flexible

Words from a previous student: "Like a woman at the same time is a mother, a wife, an employee. So the same person possesses different behavior in different situations" - Milana B27

instanceOf
	keyword that can find the type of the object

		real use case example:
			reading from excel
			values are given back as Object

			if(cell instanceOf String){
				// String
			} else if(cell instanceOf Integer){
				// parse
			}

Reference casting

    able to cast/change the reference of the object to a different reference type

    upcasting: from a sub class to a super class
        automatically/implicitly

    downcasting: from a super class to a sub class
        manually/explicitly
----------------------------
public class Person { liveFree() }
public class SDET extends Person{ automate() }
public class SM extends Person { manageTeam() }

Person p = new Person();
p.liveFree();

SDET sdet = new SDET();
sdet.liveFree();
sdet.automate();

//Upcasting:
Person sdetP = new SDET();
sdetP.liveFree(); // no Automate
cy
//Downcast:

1) ((SDET)sdetP).automate();

2) SDET sdetP2 = (SDET)sdetP;
   sdetP2.automate();

Person smP = new SM();
smP.liveFree();
((SM)smP).manageTeam();

-----------------------------

    real use case example:
	WebDriver driver = new ChromeDriver();

	scenario: fail the test, so we want to take a screenshot

	    driver -> this is the WebDriver interface, but WebDriver interface does not know the screenshot method

	    ((TakesScreenShot)driver).takeScreenShot() --> the reference was cast to the TakesScreenShot interface, which has access to the takeScreenShot method. Now we can execute the method

public interface WebDriver ( get(String Url) )

public interface TakesScreenShot ( takeScreenShot() )

class ChromeDriver implements WebDriver, TakesScreenShot{
	get(String Url)
	takeScreenShot()
	maximize()
}

WebDriver driver = new ChromeDriver();
driver.get("etsy.com")

I need to take screenshot: need to downcast

((TakesScreenShot)driver).takeScreenShot();
((ChromeDriver)driver).takeScreenShot();


====================================
Static & Dynamic Polymorphism

static polymorphism / static binding / compile time binding
    example of this: method overloading

dynamic polymorphism / dynamic binding / run time binding
    example of this: method overriding

    calling a method and executing are different, and they are not linked.
    You can call a method anywhere
    execution happens during runtime

A > B > C
	  > D

new D() -> A,B,D,Object
new C() -> A,B,C,Object
new B() -> A,B,Object
new A() -> A,Object

C c = new B(); Error

A obj = new C();
(B)obj
(C)obj
(D)obj /ClassCastException

Object obj = new B();
(A)obj -> A obj = new B();
(B)obj -> B obj = new B();

Object > A(m1) > B(m2) > C(m3)
(toString)	  		   > D(m4)

D obj = new D(); => m1,m2,m4
A obj = new D(); => m1
B obj = new D(); => m1,m2

Object obj = new D(); => none(toString etc)
obj.toString();
((B)obj).m2();
((D)obj).m4();

__________________________________________________________________

Exceptions

https://interviewnoodle.com/exception-in-java-89a0b41e0c45

What is an exception

	stops the normal flow of execution because of some code
	we will handle these or fix the code that is causing the exception

Exceptions are objects

Inheritance of Exceptions
	Throwable
		Error: OutOfMemory(Heap is full), StackOverFlowError(Stack is full)
		Exception -> checked exceptions
			RuntimeException -> unchecked exceptions

Types of exceptions:

	checked/compile time

		these exceptions MUST be handled for the program to compile

		Ex: Thread.sleep(), working with files

	unchecked/run time

		an exception that could occur during execution
		You can handle or fix the code

		Ex: StringIndexOutOfBounds, NullPointerException

How to handle exceptions

	try/catch block

		the try block is for any code we want to run, that could cause an exception

			try {

			}

		the catch block allows us to determine what code should be run if the specified exception is thrown

			(catch Exception e)
				Note: 'e' is commonly used as the reference name

			Ex: catch(NullPointerException e)

    multiple catch blocks

        it is possible to have multiple catch blocks to handle different kinds of exceptions

        -> Note: you want to make the exceptions as specific as possible to not allow unexpected exceptions to be handled

        rule: order of the catch blocks does matter. The Exceptions should be most specific at the top and become more general towards the end

    finally block:

        its optional to add to try/catch

        this code block will run no matter, regardless if there is an exception or not

Useful exception methods

    printStackTrace():
    	prints the details about the exception to the console

    getMessage():
    	returns a String of the message component of the exception

	------------------------------------------------------------------------

IQ: What is the difference between final, finally, finalize()?

	final: variables cannot be changed, class cannot be inherited, and methods cannot be overridden

	finally: block of code used with the try catch. It always runs no matter if there is an exception or not

	finalize(): a method called by the garbage collector to help clean the memory
__________________________________________________________________

Checked exceptions:
	2 options for code to compile:
		1. HANDLE using try catch
		2. DECLARE using throws


main{
	try{
		Thread.sleep(1234);
	}catch(...) {...}
}

main(String[] args) throws InterruptedException {
	Thread.sleep(1234);
}
===================================

throw new RuntimeException("Something went wrong");

throw keyword -> creates exception object manually and throws.

throws -> is used to declare exception in method signature.
